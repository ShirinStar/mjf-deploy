{"version":3,"sources":["webpack:///./node_modules/get-video-id/dist/get-video-id.esm.js","webpack:///./src/components/VideoEmbed.js","webpack:///./src/templates/Project.js"],"names":["stripParameters","shortcodeString","includes","split","youtube","youtubeString","string_","replace","shortcode","test","inlinev","parameterv","parameterwebp","embedreg","pop","attrreg","match","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","_unsupportedIterableToArray","TypeError","_nonIterableRest","len","arr2","vimeo","vimeoString","id","array","_string_$split","_string_$split3","eventMatches","exec","matches","vimeoPipe","join","RegExp","vine","videopress","urlString","idRegex","microsoftStream","tiktok","basicParsed","dailymotion","shortParsed","dynamicParsed","input","getSrc","trim","metadata","service","decodeURIComponent","VideoEmbed","link","getVideoId","vimeoEmbedUrl","youtubeEmbedUrl","responsiveVideoContainer","padding","position","responsiveVideoPlayer","top","left","width","height","style","src","frameBorder","allow","allowFullScreen","serializers","marks","children","mark","blank","className","href","target","rel","SingleProjectPage","project","data","year","videoLink","blocks","_rawBodyPortableText","_rawFeaturePortableText","BHSimage1","BHSimage2","BHSimage3","BHSimage4","asset","url","alt"],"mappings":";uJASA,SAASA,EAAgBC,GAEvB,OAAIA,EAAgBC,SAAS,KACpBD,EAAgBE,MAAM,KAAK,GAGhCF,EAAgBC,SAAS,KACpBD,EAAgBE,MAAM,KAAK,GAGhCF,EAAgBC,SAAS,KACpBD,EAAgBE,MAAM,KAAK,GAG7BF,EAST,SAASG,EAAQC,GACf,IAAIC,EAAUD,EAEdC,EAAUA,EAAQC,QAAQ,SAAU,IAEpC,IAAIC,EAAY,0DAEhB,GAAIA,EAAUC,KAAKH,GAEjB,OAAON,EADWM,EAAQH,MAAMK,GAAW,IAK7C,IAAIE,EAAU,gBAEd,GAAIA,EAAQD,KAAKH,GAEf,OAAON,EADQM,EAAQH,MAAMO,GAAS,IAKxC,IAAIC,EAAa,UAEjB,GAAIA,EAAWF,KAAKH,GAElB,OAAON,EADKM,EAAQH,MAAMQ,GACG,GAAGR,MAAM,KAAK,IAI7C,IAAIS,EAAgB,eAEpB,GAAIA,EAAcH,KAAKH,GAErB,OAAON,EADIM,EAAQH,MAAMS,GAAe,IAK1C,IAAIC,EAAW,aAEf,GAAIA,EAASJ,KAAKH,GAEhB,OAAON,EADOM,EAAQH,MAAMU,GAAU,IAOxC,IAFkB,0BAEFJ,KAAKH,GAArB,CAOA,GAFc,wBAEFG,KAAKH,GAEf,OAAON,EADQM,EAAQH,MAAM,KACGW,OAIlC,IAAIC,EAAU,8CAEd,OAAIA,EAAQN,KAAKH,GACRN,EAAgBM,EAAQU,MAAMD,GAAS,SADhD,GAOF,SAASE,EAAeC,EAAKC,GAC3B,OAGF,SAAyBD,GACvB,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EAJxBI,CAAgBJ,IAOzB,SAA+BA,EAAKC,GAClC,IAAII,EAAY,MAAPL,EAAc,KAAyB,oBAAXM,QAA0BN,EAAIM,OAAOC,WAAaP,EAAI,cAE3F,GAAU,MAANK,EAAY,OAChB,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKb,KAAQW,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAGS,QAEThB,GAAKS,EAAKQ,SAAWjB,GAH4BU,GAAK,IAK5D,MAAOQ,GACPP,GAAK,EACLH,EAAKU,EACL,QACA,IACOR,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,EAlCwBU,CAAsBpB,EAAKC,IAqC5D,SAAqCoB,EAAGC,GACtC,IAAKD,EAAG,OACR,GAAiB,iBAANA,EAAgB,OAAOE,EAAkBF,EAAGC,GACvD,IAAIE,EAAIC,OAAOC,UAAUC,SAASd,KAAKQ,GAAGO,MAAM,GAAI,GAC1C,WAANJ,GAAkBH,EAAEQ,cAAaL,EAAIH,EAAEQ,YAAYC,MACvD,GAAU,QAANN,GAAqB,QAANA,EAAa,OAAOtB,MAAM6B,KAAKV,GAClD,GAAU,cAANG,GAAqB,2CAA2CjC,KAAKiC,GAAI,OAAOD,EAAkBF,EAAGC,GA3CzCU,CAA4BhC,EAAKC,IAwDnG,WACE,MAAM,IAAIgC,UAAU,6IAzDmFC,GA8CzG,SAASX,EAAkBvB,EAAKmC,IACnB,MAAPA,GAAeA,EAAMnC,EAAIkB,UAAQiB,EAAMnC,EAAIkB,QAE/C,IAAK,IAAIjB,EAAI,EAAGmC,EAAO,IAAIlC,MAAMiC,GAAMlC,EAAIkC,EAAKlC,IAC9CmC,EAAKnC,GAAKD,EAAIC,GAGhB,OAAOmC,EAcT,SAASC,EAAMC,GACb,IAkBIC,EACAC,EAnBApD,EAAUkD,EAEd,GAAIlD,EAAQJ,SAAS,KAAM,CACzB,IAAIyD,EAAiBrD,EAAQH,MAAM,KAInCG,EAFsBW,EAAe0C,EAAgB,GAE3B,GAG5B,GAAIrD,EAAQJ,SAAS,OAASI,EAAQJ,SAAS,YAAa,CAC1D,IAAI0D,EAAkBtD,EAAQH,MAAM,KAIpCG,EAFsBW,EAAe2C,EAAiB,GAE5B,GAK5B,IACIC,EADQ,uCACaC,KAAKxD,GAE9B,GAAIuD,GAAgBA,EAAa,GAC/B,OAAOA,EAAa,GAGtB,IACIE,EADU,+BACQD,KAAKxD,GAE3B,GAAIyD,GAAWA,EAAQ,GACrB,OAAOA,EAAQ,GAGjB,IAAIC,EAAY,CAAC,0CAA2C,8BAA+B,SAAU,SAASC,KAAK,KAGnH,GAFiB,IAAIC,OAAOF,EAAW,OAExBvD,KAAKH,IAClBoD,EAAQpD,EAAQH,MAAM,OAETuD,EAAMtB,OAAS,IAC1BqB,EAAKC,EAAM5C,YAER,GAAI,cAAcL,KAAKH,GAAU,CAGtC,IAFAoD,EAAQpD,EAAQH,MAAM,cAETuD,EAAMtB,OAAS,EAK1BqB,EAFsBxC,EAFDyC,EAAM,GAAGvD,MAAM,KAEiB,GAEhC,GAIzB,OAAOsD,EAST,SAASU,EAAK7D,GACZ,IACIyD,EADQ,0CACQD,KAAKxD,GAEzB,GAAIyD,GAAWA,EAAQ3B,OAAS,EAC9B,OAAO2B,EAAQ,GAYnB,SAASK,EAAWC,GAClB,IAAIC,EAEJ,GAAID,EAAUnE,SAAS,SAErB,OADAoE,EAAU,iBACHD,EAAUrD,MAAMsD,GAAS,GAGlCA,EAAU,eACV,IAAIP,EAAUM,EAAUrD,MAAMsD,GAE9B,OAAIP,GAAWA,EAAQ3B,OAAS,EACvB2B,EAAQ,QADjB,EAaF,SAASQ,EAAgBF,GACvB,IACIN,GADQM,EAAUnE,SAAS,SAAW,uEAAyE,iEAC/F4D,KAAKO,GAEzB,GAAIN,GAAWA,EAAQ3B,OAAS,EAC9B,OAAO2B,EAAQ,GAYnB,SAASS,EAAOH,GAEd,IACII,EADW,kCACYX,KAAKO,GAEhC,GAAII,GAAeA,EAAYrC,OAAS,EACtC,OAAOqC,EAAY,GAYvB,SAASC,EAAYL,GAEnB,IACII,EADW,+CACYX,KAAKO,GAEhC,GAAII,EACF,OAAOA,EAAY,GAIrB,IACIE,EADa,2BACYb,KAAKO,GAElC,GAAIM,GAAeA,EAAYvC,OAAS,EACtC,OAAOuC,EAAY,GAIrB,IACIC,EADe,4CACcd,KAAKO,GAEtC,OAAIO,GAAiBA,EAAcxC,OAAS,EACnCwC,EAAc,QADvB,EA0Ga,MAxEf,SAAoBP,GAClB,GAAyB,iBAAdA,EACT,MAAM,IAAIlB,UAAU,iCAGtB,IAAI7C,EAAU+D,EAEV,YAAY5D,KAAKH,KACnBA,EA7BJ,SAAgBuE,GACd,GAAqB,iBAAVA,EACT,MAAM,IAAI1B,UAAU,4BAGtB,IACIY,EADW,gBACQD,KAAKe,GAE5B,GAAId,GAAWA,EAAQ3B,QAAU,EAC/B,OAAO2B,EAAQ,GAoBLe,CAAOxE,IAQnBA,GAFAA,GAFAA,EAAUA,EAAQyE,QAEAxE,QAAQ,YAAa,KAErBA,QAAQ,QAAS,KACnC,IAAIyE,EAAW,CACbvB,GAAI,KACJwB,QAAS,MAGX,GAAI,aAAaxE,KAAKH,GAAU,CAE9B,IAAIyD,EAAUzD,EAAQU,MAAM,gBAExB+C,IAEFzD,EAAU4E,mBAAmBnB,EAAQ,KAyCzC,MArCI,sCAAsCtD,KAAKH,GAC7C0E,EAAW,CACTvB,GAAIrD,EAAQE,GACZ2E,QAAS,WAEF,QAAQxE,KAAKH,GACtB0E,EAAW,CACTvB,GAAIF,EAAMjD,GACV2E,QAAS,SAEF,OAAOxE,KAAKH,GACrB0E,EAAW,CACTvB,GAAIU,EAAK7D,GACT2E,QAAS,QAEF,aAAaxE,KAAKH,GAC3B0E,EAAW,CACTvB,GAAIW,EAAW9D,GACf2E,QAAS,cAEF,kBAAkBxE,KAAKH,GAChC0E,EAAW,CACTvB,GAAIc,EAAgBjE,GACpB2E,QAAS,mBAEF,cAAcxE,KAAKH,GAC5B0E,EAAW,CACTvB,GAAIe,EAAOlE,GACX2E,QAAS,UAEF,6BAA6BxE,KAAKH,KAC3C0E,EAAW,CACTvB,GAAIiB,EAAYpE,GAChB2E,QAAS,gBAIND,GC/aM,SAASG,EAAT,GAA+B,IAATC,EAAQ,EAARA,KAC3B3B,EAAO4B,EAAWD,GAAlB3B,GACAwB,EAAYI,EAAWD,GAAvBH,QACFK,EAAa,kCAAqC7B,EAArC,+CACb8B,EAAe,iCAAoC9B,EAEnD+B,EAA2B,CAC/BC,QAAS,eACTC,SAAU,YAGNC,EAAwB,CAC5BD,SAAU,WACVE,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,QAGV,OACE,oCAEe,UAAZd,EACC,yBAAKe,MAAOR,GACV,4BACES,IAAKX,EACLU,MAAOL,EACPO,YAAY,IACZC,MAAM,uBACNC,iBAAe,KAInB,GAEW,YAAZnB,EACC,yBAAKe,MAAOR,GACV,4BACES,IAAKV,EACLS,MAAOL,EACPO,YAAY,IACZC,MAAM,0EACNC,iBAAe,KAInB,M,kCCjDR,qHAKMC,EAAc,CAClBC,MAAO,CACLlB,KAAM,gBAAGmB,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACJA,EAAKC,MACH,uBACEC,UAAU,gBACVC,KAAMH,EAAKG,KACXC,OAAO,SACPC,IAAI,uBAEHN,GAGH,uBAAGG,UAAU,gBAAgBC,KAAMH,EAAKG,MACrCJ,MAMI,SAASO,EAAT,GAAsC,IAC3CC,EAD0C,EAARC,KAClCD,QAER,OACE,oCACE,yBAAKL,UAAU,eACb,wBAAIA,UAAU,2BAA2BK,EAAQ/D,MACjD,uBAAG0D,UAAU,eAAeK,EAAQE,OAEf,OAAtBF,EAAQG,UACP,GAEA,yBAAKR,UAAU,0BACb,kBAAC,IAAD,CAAYtB,KAAM2B,EAAQG,aAI9B,yBAAKR,UAAU,kBACb,kBAAC,IAAD,CACES,OAAQJ,EAAQK,qBAChBf,YAAaA,KAGoB,OAApCU,EAAQM,wBACP,yBAAKX,UAAU,cACb,uBAAGA,UAAU,YAAb,cACA,kBAAC,IAAD,CACES,OAAQJ,EAAQM,wBAChBhB,YAAaA,KAIjB,GAEF,yBAAKK,UAAU,mBACS,MAArBK,EAAQO,WACY,MAArBP,EAAQQ,WACa,MAArBR,EAAQS,WACa,MAArBT,EAAQU,UACN,GAEA,oCACE,wBAAIf,UAAU,YAAd,qBACA,yBAAKA,UAAU,mBACS,MAArBK,EAAQO,UACP,GAEA,yBACEZ,UAAU,WACVT,IAAKc,EAAQO,UAAUI,MAAMC,IAC7BC,IAAI,SAGc,MAArBb,EAAQQ,UACP,IAEA,yBACEb,UAAU,WACVT,IAAKc,EAAQQ,UAAUG,MAAMC,IAC7BC,IAAI,SAGc,MAArBb,EAAQS,UACP,GAEA,yBACEd,UAAU,WACVT,IAAKc,EAAQS,UAAUE,MAAMC,IAC7BC,IAAI,SAGc,MAArBb,EAAQU,UACP,IAEA,yBACEf,UAAU,WACVT,IAAKc,EAAQU,UAAUC,MAAMC,IAC7BC,IAAI","file":"component---src-templates-project-js-21dd42ce61ed103231ea.js","sourcesContent":["/*! get-video-id v3.4.1 | @license MIT Â© Michael Wuergler | https://github.com/radiovisual/get-video-id */\n\n/**\n * Strip away any remaining parameters following `?` or `/` or '&' for YouTube shortcode strings.\n *\n * @note this function is not meant to work with url strings containing a protocol like https://\n * @param {String} shortcodeString - the parameter string\n * @returns {String}\n */\nfunction stripParameters(shortcodeString) {\n  // Split parameters or split folder separator\n  if (shortcodeString.includes('?')) {\n    return shortcodeString.split('?')[0];\n  }\n\n  if (shortcodeString.includes('/')) {\n    return shortcodeString.split('/')[0];\n  }\n\n  if (shortcodeString.includes('&')) {\n    return shortcodeString.split('&')[0];\n  }\n\n  return shortcodeString;\n}\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction youtube(youtubeString) {\n  var string_ = youtubeString; // Remove time hash at the end of the string\n\n  string_ = string_.replace(/#t=.*$/, ''); // Shortcode\n\n  var shortcode = /youtube:\\/\\/|https?:\\/\\/youtu\\.be\\/|http:\\/\\/y2u\\.be\\//g;\n\n  if (shortcode.test(string_)) {\n    var shortcodeid = string_.split(shortcode)[1];\n    return stripParameters(shortcodeid);\n  } // /v/ or /vi/\n\n\n  var inlinev = /\\/v\\/|\\/vi\\//g;\n\n  if (inlinev.test(string_)) {\n    var inlineid = string_.split(inlinev)[1];\n    return stripParameters(inlineid);\n  } // V= or vi=\n\n\n  var parameterv = /v=|vi=/g;\n\n  if (parameterv.test(string_)) {\n    var array = string_.split(parameterv);\n    return stripParameters(array[1].split('&')[0]);\n  } // V= or vi=\n\n\n  var parameterwebp = /\\/an_webp\\//g;\n\n  if (parameterwebp.test(string_)) {\n    var webp = string_.split(parameterwebp)[1];\n    return stripParameters(webp);\n  } // Embed\n\n\n  var embedreg = /\\/embed\\//g;\n\n  if (embedreg.test(string_)) {\n    var embedid = string_.split(embedreg)[1];\n    return stripParameters(embedid);\n  } // ignore /user/username pattern\n\n\n  var usernamereg = /\\/user\\/([a-zA-Z\\d]*)$/g;\n\n  if (usernamereg.test(string_)) {\n    return undefined;\n  } // User\n\n\n  var userreg = /\\/user\\/(?!.*videos)/g;\n\n  if (userreg.test(string_)) {\n    var elements = string_.split('/');\n    return stripParameters(elements.pop());\n  } // Attribution_link\n\n\n  var attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n  if (attrreg.test(string_)) {\n    return stripParameters(string_.match(attrreg)[1]);\n  }\n\n  return undefined;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/**\n * Get the vimeo id.\n *\n * @param {String} vimeoString the url from which you want to extract the id\n * @returns {String|undefined}\n */\n\n\nfunction vimeo(vimeoString) {\n  var string_ = vimeoString;\n\n  if (string_.includes('#')) {\n    var _string_$split = string_.split('#');\n\n    var _string_$split2 = _slicedToArray(_string_$split, 1);\n\n    string_ = _string_$split2[0];\n  }\n\n  if (string_.includes('?') && !string_.includes('clip_id=')) {\n    var _string_$split3 = string_.split('?');\n\n    var _string_$split4 = _slicedToArray(_string_$split3, 1);\n\n    string_ = _string_$split4[0];\n  }\n\n  var id;\n  var array;\n  var event = /https?:\\/\\/vimeo\\.com\\/event\\/(\\d+)$/;\n  var eventMatches = event.exec(string_);\n\n  if (eventMatches && eventMatches[1]) {\n    return eventMatches[1];\n  }\n\n  var primary = /https?:\\/\\/vimeo\\.com\\/(\\d+)/;\n  var matches = primary.exec(string_);\n\n  if (matches && matches[1]) {\n    return matches[1];\n  }\n\n  var vimeoPipe = ['https?://player.vimeo.com/video/[0-9]+$', 'https?://vimeo.com/channels', 'groups', 'album'].join('|');\n  var vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n  if (vimeoRegex.test(string_)) {\n    array = string_.split('/');\n\n    if (array && array.length > 0) {\n      id = array.pop();\n    }\n  } else if (/clip_id=/gim.test(string_)) {\n    array = string_.split('clip_id=');\n\n    if (array && array.length > 0) {\n      var _array$1$split = array[1].split('&');\n\n      var _array$1$split2 = _slicedToArray(_array$1$split, 1);\n\n      id = _array$1$split2[0];\n    }\n  }\n\n  return id;\n}\n/**\n * Get the vine id.\n * @param {string} string_ - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction vine(string_) {\n  var regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z\\d]*)\\/?/;\n  var matches = regex.exec(string_);\n\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the VideoPress id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction videopress(urlString) {\n  var idRegex;\n\n  if (urlString.includes('embed')) {\n    idRegex = /embed\\/(\\w{8})/;\n    return urlString.match(idRegex)[1];\n  }\n\n  idRegex = /\\/v\\/(\\w{8})/;\n  var matches = urlString.match(idRegex);\n\n  if (matches && matches.length > 0) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the Microsoft Stream id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction microsoftStream(urlString) {\n  var regex = urlString.includes('embed') ? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z\\d-]*)\\/?/ : /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z\\d-]*)\\/?/;\n  var matches = regex.exec(urlString);\n\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the tiktok id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction tiktok(urlString) {\n  // Parse basic url and embeds\n  var basicReg = /tiktok\\.com(.*)\\/video\\/(\\d+)/gm;\n  var basicParsed = basicReg.exec(urlString);\n\n  if (basicParsed && basicParsed.length > 2) {\n    return basicParsed[2];\n  }\n\n  return undefined;\n}\n/**\n * Get the dailymotion id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction dailymotion(urlString) {\n  // Parse basic url and embeds\n  var basicReg = /dailymotion\\.com(.*)(video)\\/([a-zA-Z\\d]+)/gm;\n  var basicParsed = basicReg.exec(urlString);\n\n  if (basicParsed) {\n    return basicParsed[3];\n  } // Parse shortlink\n\n\n  var shortRegex = /dai\\.ly\\/([a-zA-Z\\d]+)/gm;\n  var shortParsed = shortRegex.exec(urlString);\n\n  if (shortParsed && shortParsed.length > 1) {\n    return shortParsed[1];\n  } // Dynamic link\n\n\n  var dynamicRegex = /dailymotion\\.com(.*)video=([a-zA-Z\\d]+)/gm;\n  var dynamicParsed = dynamicRegex.exec(urlString);\n\n  if (dynamicParsed && dynamicParsed.length > 2) {\n    return dynamicParsed[2];\n  }\n\n  return undefined;\n}\n/**\n * Get the value assigned to a \"src\" attribute in a string, or undefined.\n * @param {String} input\n * @returns {String|undefined}\n */\n\n\nfunction getSrc(input) {\n  if (typeof input !== 'string') {\n    throw new TypeError('getSrc expected a string');\n  }\n\n  var srcRegEx = /src=\"(.*?)\"/gm;\n  var matches = srcRegEx.exec(input);\n\n  if (matches && matches.length >= 2) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the id and service from a video url.\n * @param {String} urlString - the url from which you want to extract the id\n * @returns {Object}\n */\n\n\nfunction getVideoId(urlString) {\n  if (typeof urlString !== 'string') {\n    throw new TypeError('get-video-id expects a string');\n  }\n\n  var string_ = urlString;\n\n  if (/<iframe/gi.test(string_)) {\n    string_ = getSrc(string_);\n  } // Remove surrounding whitespaces or linefeeds\n\n\n  string_ = string_.trim(); // Remove the '-nocookie' flag from youtube urls\n\n  string_ = string_.replace('-nocookie', ''); // Remove any leading `www.`\n\n  string_ = string_.replace('/www.', '/');\n  var metadata = {\n    id: null,\n    service: null\n  }; // Try to handle google redirection uri\n\n  if (/\\/\\/google/.test(string_)) {\n    // Find the redirection uri\n    var matches = string_.match(/url=([^&]+)&/); // Decode the found uri and replace current url string - continue with final link\n\n    if (matches) {\n      // JavaScript can get encoded URI\n      string_ = decodeURIComponent(matches[1]);\n    }\n  }\n\n  if (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(string_)) {\n    metadata = {\n      id: youtube(string_),\n      service: 'youtube'\n    };\n  } else if (/vimeo/.test(string_)) {\n    metadata = {\n      id: vimeo(string_),\n      service: 'vimeo'\n    };\n  } else if (/vine/.test(string_)) {\n    metadata = {\n      id: vine(string_),\n      service: 'vine'\n    };\n  } else if (/videopress/.test(string_)) {\n    metadata = {\n      id: videopress(string_),\n      service: 'videopress'\n    };\n  } else if (/microsoftstream/.test(string_)) {\n    metadata = {\n      id: microsoftStream(string_),\n      service: 'microsoftstream'\n    };\n  } else if (/tiktok\\.com/.test(string_)) {\n    metadata = {\n      id: tiktok(string_),\n      service: 'tiktok'\n    };\n  } else if (/(dailymotion\\.com|dai\\.ly)/.test(string_)) {\n    metadata = {\n      id: dailymotion(string_),\n      service: 'dailymotion'\n    };\n  }\n\n  return metadata;\n}\n\nexport default getVideoId;","import React, { useEffect, useState } from 'react';\nimport getVideoId from 'get-video-id';\n\nexport default function VideoEmbed({ link }) {\n  const { id } = getVideoId(link);\n  const { service } = getVideoId(link);\n  const vimeoEmbedUrl = `https://player.vimeo.com/video/${id}?api=1&h=007989203f?&loop=1&byline=0&title=0`;\n  const youtubeEmbedUrl = `https://www.youtube.com/embed/${id}`;\n\n  const responsiveVideoContainer = {\n    padding: '56.25% 0 0 0',\n    position: 'relative',\n  };\n\n  const responsiveVideoPlayer = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n  };\n\n  return (\n    <>\n      {/* {!id ? <div>Missing YouTube or Vimeo URL</div> : ''} */}\n      {service === 'vimeo' ? (\n        <div style={responsiveVideoContainer}>\n          <iframe\n            src={vimeoEmbedUrl}\n            style={responsiveVideoPlayer}\n            frameBorder=\"0\"\n            allow=\"autoplay; fullscreen\"\n            allowFullScreen\n          />\n        </div>\n      ) : (\n        ''\n      )}\n      {service === 'youtube' ? (\n        <div style={responsiveVideoContainer}>\n          <iframe\n            src={youtubeEmbedUrl}\n            style={responsiveVideoPlayer}\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { graphql, Link } from 'gatsby';\nimport PortableText from '@sanity/block-content-to-react';\nimport VideoEmbed from '../components/VideoEmbed';\n\nconst serializers = {\n  marks: {\n    link: ({ children, mark }) =>\n      mark.blank ? (\n        <a\n          className=\"bodyTextLinks\"\n          href={mark.href}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {children}\n        </a>\n      ) : (\n        <a className=\"bodyTextLinks\" href={mark.href}>\n          {children}\n        </a>\n      ),\n  },\n};\n\nexport default function SingleProjectPage({ data }) {\n  const { project } = data;\n\n  return (\n    <>\n      <div className=\"projectHead\">\n        <h2 className=\"pageTitle singleProject\">{project.name}</h2>\n        <p className=\"projectYear\">{project.year}</p>\n      </div>\n      {project.videoLink === null ? (\n        ''\n      ) : (\n        <div className=\"videoDiv singleProject\">\n          <VideoEmbed link={project.videoLink} />\n        </div>\n      )}\n\n      <div className=\"descriptionDiv\">\n        <PortableText\n          blocks={project._rawBodyPortableText}\n          serializers={serializers}\n        />\n      </div>\n      {project._rawFeaturePortableText !== null ? (\n        <div className=\"featureDiv\">\n          <p className=\"featureP\">Featured: </p>\n          <PortableText\n            blocks={project._rawFeaturePortableText}\n            serializers={serializers}\n          />\n        </div>\n      ) : (\n        ''\n      )}\n      <div className=\"imagesContainer\">\n        {project.BHSimage1 == null &&\n        project.BHSimage2 == null &&\n        project.BHSimage3 == null &&\n        project.BHSimage4 == null ? (\n          ''\n        ) : (\n          <>\n            <h2 className=\"BHSTitle\">Behind The Scenes</h2>\n            <div className=\"imageBHSGallery\">\n              {project.BHSimage1 == null ? (\n                ''\n              ) : (\n                <img\n                  className=\"BHSimage\"\n                  src={project.BHSimage1.asset.url}\n                  alt=\"BHS1\"\n                />\n              )}\n              {project.BHSimage2 == null ? (\n                ' '\n              ) : (\n                <img\n                  className=\"BHSimage\"\n                  src={project.BHSimage2.asset.url}\n                  alt=\"BHS2\"\n                />\n              )}\n              {project.BHSimage3 == null ? (\n                ''\n              ) : (\n                <img\n                  className=\"BHSimage\"\n                  src={project.BHSimage3.asset.url}\n                  alt=\"BHS3\"\n                />\n              )}\n              {project.BHSimage4 == null ? (\n                ' '\n              ) : (\n                <img\n                  className=\"BHSimage\"\n                  src={project.BHSimage4.asset.url}\n                  alt=\"BHS4\"\n                />\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport const projectQuery = graphql`\n  query($slug: String!) {\n    project: sanitySingleProject(slug: { current: { eq: $slug } }) {\n      name\n      id\n      year\n      tagline\n      videoLink\n      _rawBodyPortableText\n      _rawFeaturePortableText\n      bodyPortableText {\n        children {\n          text\n        }\n      }\n      image {\n        asset {\n          fluid(maxWidth: 800) {\n            ...GatsbySanityImageFluid\n          }\n        }\n      }\n      BHSimage1 {\n        asset {\n          url\n        }\n      }\n      BHSimage2 {\n        asset {\n          url\n        }\n      }\n      BHSimage3 {\n        asset {\n          url\n        }\n      }\n      BHSimage4 {\n        asset {\n          url\n        }\n      }\n      tags {\n        name\n        id\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}