{"version":3,"sources":["webpack:///./node_modules/get-video-id/dist/get-video-id.esm.js","webpack:///./src/components/VideoEmbed.js","webpack:///./src/pages/reels.js"],"names":["stripParameters","str","indexOf","split","youtube","youtubeStr","replace","shortcode","test","inlinev","parameterv","parameterwebp","embedreg","pop","attrreg","match","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","_unsupportedIterableToArray","TypeError","_nonIterableRest","len","arr2","vimeo","vimeoStr","id","_str$split","_str$split3","matches","exec","vimeoPipe","join","RegExp","vine","videopress","idRegex","microsoftStream","videoStr","input","url","getSrc","trim","metadata","service","decodeURIComponent","VideoEmbed","link","getVideoId","vimeoEmbedUrl","youtubeEmbedUrl","responsiveVideoContainer","padding","position","responsiveVideoPlayer","top","left","width","height","style","src","frameBorder","allow","allowFullScreen","ReelsPage","data","setEventTrigger","eventTrigger","reels","nodes","useEffect","title","className","sort","a","b","setOrder","map","reel","key","reelLink"],"mappings":"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","file":"component---src-pages-reels-js-5d8c9fc3a404f8a82c50.js","sourcesContent":["var getSrc = function getSrc(input) {\n  if (typeof input !== 'string') {\n    throw new TypeError('get-src expected a string');\n  }\n\n  var re = /src=\"(.*?)\"/gm;\n  var url = re.exec(input);\n\n  if (url && url.length >= 2) {\n    return url[1];\n  }\n};\n/**\n * Strip away any parameters following `?` or `/` or '&'\n * @param str\n * @returns {String}\n */\n\n\nfunction stripParameters(str) {\n  // Split parameters or split folder separator\n  if (str.indexOf('?') > -1) {\n    return str.split('?')[0];\n  }\n\n  if (str.indexOf('/') > -1) {\n    return str.split('/')[0];\n  }\n\n  if (str.indexOf('&') > -1) {\n    return str.split('&')[0];\n  }\n\n  return str;\n}\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction youtube(youtubeStr) {\n  var str = youtubeStr; // remove time hash at the end of the string\n\n  str = str.replace(/#t=.*$/, ''); // shortcode\n\n  var shortcode = /youtube:\\/\\/|https?:\\/\\/youtu\\.be\\/|http:\\/\\/y2u\\.be\\//g;\n\n  if (shortcode.test(str)) {\n    var shortcodeid = str.split(shortcode)[1];\n    return stripParameters(shortcodeid);\n  } // /v/ or /vi/\n\n\n  var inlinev = /\\/v\\/|\\/vi\\//g;\n\n  if (inlinev.test(str)) {\n    var inlineid = str.split(inlinev)[1];\n    return stripParameters(inlineid);\n  } // v= or vi=\n\n\n  var parameterv = /v=|vi=/g;\n\n  if (parameterv.test(str)) {\n    var arr = str.split(parameterv);\n    return stripParameters(arr[1].split('&')[0]);\n  } // v= or vi=\n\n\n  var parameterwebp = /\\/an_webp\\//g;\n\n  if (parameterwebp.test(str)) {\n    var webp = str.split(parameterwebp)[1];\n    return stripParameters(webp);\n  } // embed\n\n\n  var embedreg = /\\/embed\\//g;\n\n  if (embedreg.test(str)) {\n    var embedid = str.split(embedreg)[1];\n    return stripParameters(embedid);\n  } // ignore /user/username pattern\n\n\n  var usernamereg = /\\/user\\/([a-zA-Z0-9]*)$/g;\n\n  if (usernamereg.test(str)) {\n    return undefined;\n  } // user\n\n\n  var userreg = /\\/user\\/(?!.*videos)/g;\n\n  if (userreg.test(str)) {\n    var elements = str.split('/');\n    return stripParameters(elements.pop());\n  } // attribution_link\n\n\n  var attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n  if (attrreg.test(str)) {\n    return stripParameters(str.match(attrreg)[1]);\n  }\n\n  return undefined;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/**\n * Get the vimeo id.\n * @param {string} vimeoStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction vimeo(vimeoStr) {\n  var str = vimeoStr;\n\n  if (str.indexOf('#') > -1) {\n    var _str$split = str.split('#');\n\n    var _str$split2 = _slicedToArray(_str$split, 1);\n\n    str = _str$split2[0];\n  }\n\n  if (str.indexOf('?') > -1 && str.indexOf('clip_id=') === -1) {\n    var _str$split3 = str.split('?');\n\n    var _str$split4 = _slicedToArray(_str$split3, 1);\n\n    str = _str$split4[0];\n  }\n\n  var id;\n  var arr;\n  var primary = /https?:\\/\\/vimeo\\.com\\/([0-9]+)/;\n  var matches = primary.exec(str);\n\n  if (matches && matches[1]) {\n    return matches[1];\n  }\n\n  var vimeoPipe = ['https?://player.vimeo.com/video/[0-9]+$', 'https?://vimeo.com/channels', 'groups', 'album'].join('|');\n  var vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n  if (vimeoRegex.test(str)) {\n    arr = str.split('/');\n\n    if (arr && arr.length) {\n      id = arr.pop();\n    }\n  } else if (/clip_id=/gim.test(str)) {\n    arr = str.split('clip_id=');\n\n    if (arr && arr.length) {\n      var _arr$1$split = arr[1].split('&');\n\n      var _arr$1$split2 = _slicedToArray(_arr$1$split, 1);\n\n      id = _arr$1$split2[0];\n    }\n  }\n\n  return id;\n}\n/**\n * Get the vine id.\n * @param {string} str - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction vine(str) {\n  var regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z0-9]*)\\/?/;\n  var matches = regex.exec(str);\n  return matches && matches[1];\n}\n/**\n * Get the VideoPress id.\n * @param {string} str - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction videopress(str) {\n  var idRegex;\n\n  if (str.indexOf('embed') > -1) {\n    idRegex = /embed\\/(\\w{8})/;\n    return str.match(idRegex)[1];\n  }\n\n  idRegex = /\\/v\\/(\\w{8})/;\n  var match = str.match(idRegex);\n\n  if (match && match.length > 0) {\n    return str.match(idRegex)[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the Microsoft Stream id.\n * @param {string} str - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction microsoftStream(str) {\n  var regex = str.indexOf('embed') > -1 ? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z0-9-]*)\\/?/ : /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z0-9-]*)\\/?/;\n  var matches = regex.exec(str);\n  return matches && matches[1];\n}\n/**\n * Get the id and service from a video url.\n * @param {String} videoStr - the url from which you want to extract the id\n * @returns {Object}\n */\n\n\nfunction getVideoId(videoStr) {\n  if (typeof videoStr !== 'string') {\n    throw new TypeError('get-video-id expects a string');\n  }\n\n  var str = videoStr;\n\n  if (/<iframe/gi.test(str)) {\n    str = getSrc(str);\n  } // remove surrounding whitespaces or linefeeds\n\n\n  str = str.trim(); // remove the '-nocookie' flag from youtube urls\n\n  str = str.replace('-nocookie', ''); // remove any leading `www.`\n\n  str = str.replace('/www.', '/');\n  var metadata = {\n    id: null,\n    service: null\n  }; // Try to handle google redirection uri\n\n  if (/\\/\\/google/.test(str)) {\n    // Find the redirection uri\n    var matches = str.match(/url=([^&]+)&/); // Decode the found uri and replace current url string - continue with final link\n\n    if (matches) {\n      // JavaScript can get encoded URI\n      str = decodeURIComponent(matches[1]);\n    }\n  }\n\n  if (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(str)) {\n    metadata = {\n      id: youtube(str),\n      service: 'youtube'\n    };\n  } else if (/vimeo/.test(str)) {\n    metadata = {\n      id: vimeo(str),\n      service: 'vimeo'\n    };\n  } else if (/vine/.test(str)) {\n    metadata = {\n      id: vine(str),\n      service: 'vine'\n    };\n  } else if (/videopress/.test(str)) {\n    metadata = {\n      id: videopress(str),\n      service: 'videopress'\n    };\n  } else if (/microsoftstream/.test(str)) {\n    metadata = {\n      id: microsoftStream(str),\n      service: 'microsoftstream'\n    };\n  }\n\n  return metadata;\n}\n\nexport default getVideoId;","import React, { useEffect, useState } from 'react';\nimport getVideoId from 'get-video-id';\n\nexport default function VideoEmbed({ link }) {\n  const { id } = getVideoId(link);\n  const { service } = getVideoId(link);\n  const vimeoEmbedUrl = `https://player.vimeo.com/video/${id}`;\n  const youtubeEmbedUrl = `https://www.youtube.com/embed/${id}`;\n\n  const responsiveVideoContainer = {\n    padding: '56.25% 0 0 0',\n    position: 'relative',\n  };\n\n  const responsiveVideoPlayer = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n  };\n\n  return (\n    <>\n      {/* {!id ? <div>Missing YouTube or Vimeo URL</div> : ''} */}\n      {service === 'vimeo' ? (\n        <div style={responsiveVideoContainer}>\n          <iframe\n            src={vimeoEmbedUrl}\n            style={responsiveVideoPlayer}\n            frameBorder=\"0\"\n            allow=\"autoplay; fullscreen\"\n            allowFullScreen\n          />\n        </div>\n      ) : (\n        ''\n      )}\n      {service === 'youtube' ? (\n        <div style={responsiveVideoContainer}>\n          <iframe\n            src={youtubeEmbedUrl}\n            style={responsiveVideoPlayer}\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { graphql } from 'gatsby';\nimport PortableText from '@sanity/block-content-to-react';\nimport VideoEmbed from '../components/VideoEmbed';\nimport FooterNoFixed from '../components/FooterNoFixed';\nimport SEO from '../components/SEO';\n\nconst serializers = {\n  marks: {\n    link: ({ children, mark }) =>\n      mark.blank ? (\n        <a\n          className=\"bodyTextLinks\"\n          href={mark.href}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {children}\n        </a>\n      ) : (\n        <a className=\"bodyTextLinks\" href={mark.href}>\n          {children}\n        </a>\n      ),\n  },\n};\n\nexport default function ReelsPage({ data, setEventTrigger, eventTrigger }) {\n  const reels = data.reels.nodes;\n\n  useEffect(() => {\n    setEventTrigger(eventTrigger + 1);\n  }, []);\n\n  return (\n    <>\n      <SEO title=\"Reels\" />\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <div className=\"reelWrapper\">\n            {reels\n              .sort((a, b) => a.setOrder - b.setOrder)\n              .map((reel) => (\n                <div key={reel.id}>\n                  {reel.reelLink === null ? (\n                    <div>\n                      <h2 className=\"reeltitle\">{reel.name}</h2>\n                      <div className=\"reelPlaceholder\">\n                        <p className=\"reelPlaceholderText\">\n                          My directing reel is currently being updated,\n                          <br />\n                          thank you for your patience!\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <>\n                      <h2 className=\"reeltitle\">{reel.name}</h2>\n                      <div className=\"videoDiv\">\n                        <VideoEmbed link={reel.reelLink} />\n                      </div>\n                    </>\n                  )}\n                  {/* <div className=\"descriptionDiv\">\n                <PortableText\n                  blocks={reel._rawBodyPortableText}\n                  serializers={serializers}\n                />\n              </div> */}\n                </div>\n              ))}\n          </div>\n        </div>\n        <FooterNoFixed />\n      </div>\n    </>\n  );\n}\n\nexport const reelsQuery = graphql`\n  query {\n    reels: allSanityReels {\n      nodes {\n        id\n        name\n        reelLink\n        setOrder\n        # _rawReelPortableText\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}